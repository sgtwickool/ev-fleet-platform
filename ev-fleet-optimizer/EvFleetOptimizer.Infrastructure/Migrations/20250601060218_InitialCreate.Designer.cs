// <auto-generated />
using System;
using EvFleetOptimizer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EvFleetOptimizer.Infrastructure.Migrations
{
    [DbContext(typeof(FleetDbContext))]
    [Migration("20250601060218_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.ChargingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CostGBP")
                        .HasColumnType("double precision");

                    b.Property<int?>("DepotId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EnergyDeliveredKWh")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PublicChargerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("PublicChargerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ChargingSessions");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Depot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargerCount")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxPowerKW")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.DepotScheduleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepotId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReservedEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReservedStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DepotScheduleEntries");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.PublicCharger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CurrentPricePerKWh")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFastCharger")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxPowerKW")
                        .HasColumnType("double precision");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PublicChargers");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.PublicChargerPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<double>("PricePerKWh")
                        .HasColumnType("double precision");

                    b.Property<int>("PublicChargerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PublicChargerId");

                    b.ToTable("PublicChargerPriceHistories");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.TimeOfUseTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("PricePerKWh")
                        .HasColumnType("double precision");

                    b.Property<string>("TariffName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeOfUseTariffs");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<double>("EstimatedDistanceKm")
                        .HasColumnType("double precision");

                    b.Property<double>("EstimatedEnergyConsumptionKWh")
                        .HasColumnType("double precision");

                    b.Property<int>("OriginLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresPublicCharging")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SuggestedChargingSessionId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("OriginLocationId");

                    b.HasIndex("SuggestedChargingSessionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedDriverId")
                        .HasColumnType("integer");

                    b.Property<double>("CurrentSoCPercent")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MaxRangeKm")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDriverId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.ChargingSession", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Depot", "Depot")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("DepotId");

                    b.HasOne("EvFleetOptimizer.Core.Entities.PublicCharger", "PublicCharger")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("PublicChargerId");

                    b.HasOne("EvFleetOptimizer.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("PublicCharger");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Depot", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Location", "Location")
                        .WithMany("Depots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.DepotScheduleEntry", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvFleetOptimizer.Core.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.PublicCharger", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.PublicChargerPriceHistory", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.PublicCharger", "PublicCharger")
                        .WithMany()
                        .HasForeignKey("PublicChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicCharger");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Trip", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Location", "DestinationLocation")
                        .WithMany("TripsAsDestination")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvFleetOptimizer.Core.Entities.Driver", "Driver")
                        .WithMany("AssignedTrips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvFleetOptimizer.Core.Entities.Location", "OriginLocation")
                        .WithMany("TripsAsOrigin")
                        .HasForeignKey("OriginLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvFleetOptimizer.Core.Entities.ChargingSession", "SuggestedChargingSession")
                        .WithMany()
                        .HasForeignKey("SuggestedChargingSessionId");

                    b.HasOne("EvFleetOptimizer.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationLocation");

                    b.Navigation("Driver");

                    b.Navigation("OriginLocation");

                    b.Navigation("SuggestedChargingSession");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("EvFleetOptimizer.Core.Entities.Driver", "AssignedDriver")
                        .WithMany("AssignedVehicles")
                        .HasForeignKey("AssignedDriverId");

                    b.Navigation("AssignedDriver");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Depot", b =>
                {
                    b.Navigation("ChargingSessions");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Driver", b =>
                {
                    b.Navigation("AssignedTrips");

                    b.Navigation("AssignedVehicles");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Location", b =>
                {
                    b.Navigation("Depots");

                    b.Navigation("TripsAsDestination");

                    b.Navigation("TripsAsOrigin");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.PublicCharger", b =>
                {
                    b.Navigation("ChargingSessions");
                });

            modelBuilder.Entity("EvFleetOptimizer.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
